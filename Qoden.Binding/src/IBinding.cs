using System;

namespace Qoden.Binding
{
	/// <summary>
	/// Abstract connection (binding) between source (usually model) object and target (usually view) object.
	/// </summary>
	/// <remarks>
	/// Concrete <see cref="IBinding"/> implementations provides means to specify target and source objects. 
	/// Usually source is model property or command and target is UI control.
	/// </remarks>
	public interface IBinding
	{
		/// <summary>
		/// Gets or sets a value indicating whether this <see cref="IBinding"/> is enabled.
		/// </summary>
		/// <remarks>
		/// When binding is disabled it keeps connection between source and target but ignore binding related events generated by them.
		/// Usually binding is disable to temporary stop data movement between source and target object.
		/// </remarks>
		bool Enabled { get; set; }

		/// <summary>
		/// Connect source and target
		/// </summary>
		/// <remarks>
		/// Usually this means 'start listening to events and update source and target objects'.
		/// </remarks>
		void Bind ();

		/// <summary>
		/// Break binding between source and target.
		/// </summary>
		/// <remarks>
		/// Calling this method completely disocnnects source and target objects so there are no references from source to target and vice versa.
		/// </remarks>
		void Unbind ();

		/// <summary>
		/// Gets a value indicating whether this <see cref="IBinding"/> is bound.
		/// </summary>
		bool Bound { get; }

		/// <summary>
		/// Move data from source object to target.
		/// </summary>
		void UpdateTarget ();

		/// <summary>
		/// Move data from target object to source.
		/// </summary>
		void UpdateSource ();
	}
}